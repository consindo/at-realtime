{"version":3,"sources":["CreateWorkerModal.jsx","Worker.jsx","AlertModal.jsx","Workers.jsx","WakaNavbar.jsx","Config.jsx","App.js","index.js"],"names":["CreateWorkerModal","createWorker","useState","modal","setmodal","prefix","setPrefix","version","setVersion","shapesContainer","setShapesContainer","shapesRegion","setShapesRegion","dbConfig","setDbConfig","newRealtime","setNewRealtime","loadingCities","setLoadingCities","cities","setCities","getCities","a","fetch","res","json","data","Object","keys","map","city","label","longName","value","sort","b","localeCompare","sensitivity","useEffect","disabled","CloseButton","className","type","onClick","aria-hidden","Button","outline","color","Modal","isOpen","toggle","backdrop","ModalHeader","close","ModalBody","FormGroup","Label","htmlFor","Input","length","onChange","e","target","options","selectedIndex","key","check","checked","ModalFooter","dbconfig","urlPrefix","window","location","hostname","Worker","worker","mapping","runAction","workerData","id","setToggle","action","btns","size","recycle","DropdownItem","divider","dropdown","Dropdown","DropdownToggle","caret","DropdownMenu","href","dbname","createdAt","Date","toLocaleString","status","includes","AlertModal","content","fn","Workers","workers","setWorkers","mappings","setMappings","loading","setLoading","alertModal","setAlertModal","alertContent","setAlertContent","toggleAlertModal","input","method","headers","body","JSON","stringify","r","command","getWorkers","mappingsRequest","mappingsResponse","workersRequest","workersResponse","console","error","Table","WakaNavbar","Navbar","dark","expand","Container","to","Collapse","Nav","navbar","NavItem","Config","config","setConfig","configRealtime","setConfigRealtime","git","setGit","killModal","setKillModal","toggleKillModal","killOrchestrator","getConfig","getHash","text","parse","rows","App","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.071ca2f4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  FormGroup,\r\n  Button,\r\n  ModalFooter,\r\n  Label,\r\n  Input\r\n} from 'reactstrap';\r\nexport default function CreateWorkerModal({ createWorker }) {\r\n  const [modal, setmodal] = useState(false);\r\n  const [prefix, setPrefix] = useState('');\r\n  const [version, setVersion] = useState('');\r\n  const [shapesContainer, setShapesContainer] = useState('shapes-us-west-2.waka.app');\r\n  const [shapesRegion, setShapesRegion] = useState('us-west-2');\r\n  const [dbConfig, setDbConfig] = useState('local');\r\n  const [newRealtime, setNewRealtime] = useState(true);\r\n  const [loadingCities, setLoadingCities] = useState(false);\r\n  const [cities, setCities] = useState([]);\r\n  const getCities = async () => {\r\n    setLoadingCities(true);\r\n    const res = await fetch('/private/prefixes');\r\n    const data = await res.json();\r\n    const cities = Object.keys(data).map(city => ({\r\n      label: data[city].longName,\r\n      value: city\r\n    }));\r\n    cities.sort((a, b) => a.label.localeCompare(b.label, 'en', { sensitivity: 'base' }))\r\n    setPrefix(cities[0].value)\r\n    setCities(cities);\r\n    setLoadingCities(false);\r\n  };\r\n  useEffect(() => {\r\n    getCities();\r\n  }, []);\r\n  const onCreateWorker = () => {\r\n    createWorker({\r\n      prefix,\r\n      version,\r\n      shapesContainer,\r\n      shapesRegion,\r\n      dbconfig: dbConfig,\r\n      newRealtime\r\n    });\r\n    setmodal(false)\r\n  };\r\n  const disabled =\r\n    !prefix || !version || !shapesContainer || !shapesRegion || !dbConfig;\r\n  const CloseButton = (\r\n    <button\r\n      className=\"close btn btn-round\"\r\n      type=\"button\"\r\n      onClick={() => setmodal(false)}\r\n    >\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  );\r\n  return (\r\n    <>\r\n      <Button outline color=\"primary\" onClick={() => setmodal(true)}>\r\n        Create Worker\r\n      </Button>\r\n      <Modal isOpen={modal} toggle={() => setmodal(false)} backdrop=\"static\">\r\n        <ModalHeader close={CloseButton}>Create Worker</ModalHeader>\r\n\r\n        <ModalBody>\r\n          <FormGroup>\r\n            <Label htmlFor=\"workerPrefix\">Prefix</Label>\r\n            <Input\r\n              type=\"select\"\r\n              disabled={loadingCities || cities.length === 0}\r\n              onChange={e =>\r\n                setPrefix(e.target.options[e.target.selectedIndex].value)\r\n              }\r\n            >\r\n              {cities.map(city => (\r\n                <option key={city.value} value={city.value}>\r\n                  {city.label}\r\n                </option>\r\n              ))}\r\n            </Input>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label htmlFor=\"workerVersion\">Version</Label>\r\n            <Input\r\n              onChange={e => setVersion(e.target.value)}\r\n              type=\"text\"\r\n              value={version}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label htmlFor=\"workerVersion\">Shapes Container</Label>\r\n            <Input\r\n              onChange={e => setShapesContainer(e.target.value)}\r\n              type=\"text\"\r\n              value={shapesContainer}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label htmlFor=\"workerVersion\">Shapes Region</Label>\r\n            <Input\r\n              onChange={e => setShapesRegion(e.target.value)}\r\n              type=\"text\"\r\n              value={shapesRegion}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label htmlFor=\"workerDbconfig\">\r\n              DB Config <code>config.db[yourConfig]</code>\r\n            </Label>\r\n            <Input\r\n              onChange={e => setDbConfig(e.target.value)}\r\n              type=\"text\"\r\n              value={dbConfig}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup check>\r\n            <Input\r\n              onChange={e => setNewRealtime(e.target.checked)}\r\n              type=\"checkbox\"\r\n              className=\"form-check-Input\"\r\n              checked={newRealtime}\r\n            />\r\n            <Label className=\"form-check-Label\" htmlFor=\"workerNewRealtime\">\r\n              New Realtime (experimental)\r\n            </Label>\r\n          </FormGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={() => setmodal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button color=\"primary\" onClick={onCreateWorker} disabled={disabled}>\r\n            Create Worker\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  DropdownItem,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu\r\n} from 'reactstrap';\r\n\r\n// so the links work in production\r\nlet urlPrefix = '..'\r\nif (window.location.hostname === 'uat-admin.waka.app') urlPrefix = 'https://uat.waka.app/a'\r\nif (window.location.hostname === 'admin.waka.app') urlPrefix = 'https://waka.app/a'\r\n\r\nconst Worker = ({ worker, mapping = {}, runAction }) => {\r\n  const { id, prefix } = worker;\r\n  const workerData = { id, prefix };\r\n  const [toggle, setToggle] = useState(false);\r\n  const action = action => {\r\n    return runAction(action, workerData);\r\n  };\r\n  let btns = (\r\n    <Button onClick={() => action('mapping/set')} color=\"light\" size=\"sm\">\r\n      activate\r\n    </Button>\r\n  );\r\n  let recycle = '';\r\n  if (worker.id === mapping.value) {\r\n    btns = (\r\n      <Button onClick={() => action('mapping/delete')} color=\"danger\" size=\"sm\">\r\n        unmap\r\n      </Button>\r\n    );\r\n    recycle = (\r\n      <>\r\n        <DropdownItem onClick={() => action('worker/recycle')}>\r\n          Recycle Service\r\n        </DropdownItem>\r\n        <DropdownItem divider />\r\n      </>\r\n    );\r\n  }\r\n\r\n  const dropdown = (\r\n    <Dropdown className=\"d-inline-block\" size=\"sm\" isOpen={toggle} toggle={() => setToggle(!toggle)}>\r\n      <DropdownToggle color=\"light\" caret>\r\n        actions\r\n      </DropdownToggle>\r\n\r\n      <DropdownMenu>\r\n        {recycle}\r\n        <DropdownItem onClick={() => action('worker/docker')}>\r\n          Get Docker Import Command\r\n        </DropdownItem>\r\n        <DropdownItem onClick={() => action('worker/status/pendingimport')}>\r\n          Start Import (pending)\r\n        </DropdownItem>\r\n        <DropdownItem\r\n          onClick={() => action('worker/status/pendingimport-willmap')}\r\n        >\r\n          Start Import & Map (pending)\r\n        </DropdownItem>\r\n        <DropdownItem onClick={() => action('worker/status/imported')}>\r\n          Set Status to Imported\r\n        </DropdownItem>\r\n        <DropdownItem onClick={() => action('worker/status/imported-willmap')}>\r\n          Set Status to Imported & Map\r\n        </DropdownItem>\r\n        <DropdownItem divider />\r\n        <DropdownItem onClick={() => action('worker/delete')}>\r\n          Delete Worker\r\n        </DropdownItem>\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"pl-0\">\r\n        {worker.id === mapping.value ? <><a href={`${urlPrefix}/${worker.prefix}/info`}>{worker.prefix}</a> ⭐</> : worker.prefix}<br />\r\n        <small className=\"text-muted\">{worker.newRealtime ? 'GTFS-R' : 'No GTFS-R'}</small>\r\n      </td>\r\n      <td>\r\n        {worker.version}<br />\r\n        <small><code><strong>DB:</strong> {worker.dbname}</code></small>\r\n      </td>\r\n      <td>\r\n        {worker.createdAt ? new Date(worker.createdAt).toLocaleString() : 'Creation unknown'}<br />\r\n        <small className={worker.status.includes('imported') ? 'text-success' : 'text-muted'}>{worker.status}</small>   \r\n      </td>\r\n      <td className=\"text-right align-middle pr-0\">\r\n        {btns} {dropdown}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Worker;\r\n","import React from 'react';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\nconst AlertModal = ({ modal, toggle, content, fn }) => {\r\n  const CloseButton = (\r\n    <button className=\"close btn btn-round\" type=\"button\" onClick={toggle}>\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  );\r\n  return (\r\n    <Modal isOpen={modal} toggle={toggle} backdrop=\"static\">\r\n      <ModalHeader close={CloseButton}>Alert</ModalHeader>\r\n      <ModalBody>{content}</ModalBody>\r\n      {fn && (\r\n        <ModalFooter>\r\n          <Button onClick={fn}>Submit</Button>\r\n        </ModalFooter>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AlertModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport CreateWorkerModal from './CreateWorkerModal';\r\nimport Worker from './Worker';\r\nimport AlertModal from './AlertModal';\r\n\r\nconst Workers = () => {\r\n  const [workers, setWorkers] = useState([]);\r\n  const [mappings, setMappings] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [alertModal, setAlertModal] = useState(false);\r\n  const [alertContent, setAlertContent] = useState('');\r\n  const toggleAlertModal = content => {\r\n    if (alertModal) {\r\n      setAlertContent('');\r\n      setAlertModal(false);\r\n    } else {\r\n      setAlertContent(content);\r\n      setAlertModal(true);\r\n    }\r\n  };\r\n  const runAction = async (action, input) => {\r\n    const r = await fetch(`/private/${action}`, {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(input)\r\n    });\r\n    const data = await r.json();\r\n    if (data.command) {\r\n      // setAlertModal(true);\r\n      toggleAlertModal(data.command);\r\n    }\r\n    getWorkers(false);\r\n  };\r\n  const getWorkers = async (loading = true) => {\r\n    try {\r\n      if (loading) {\r\n        setLoading(true);\r\n      }\r\n\r\n      const mappingsRequest = await fetch('/private/mapping');\r\n      const mappingsResponse = await mappingsRequest.json();\r\n      setMappings(mappingsResponse);\r\n\r\n      const workersRequest = await fetch('/private/worker');\r\n      const workersResponse = await workersRequest.json();\r\n      workersResponse.sort((a, b) => {\r\n        // if they're both null, order by version\r\n        if (a.createdAt === null && b.createdAt === null) { \r\n          return b.version.localeCompare(a.version)\r\n        }\r\n        // send null created at's to the bottom\r\n        if (a.createdAt === null) return 1\r\n        if (b.createdAt === null) return -1\r\n\r\n        // if they have creation dates, order by that\r\n        return new Date(b.createdAt) - new Date(a.createdAt)\r\n      })\r\n      setWorkers(workersResponse);\r\n      if (loading) {\r\n        setLoading(false);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getWorkers();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-2\">\r\n        <h2>Workers</h2>\r\n        <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n          <CreateWorkerModal createWorker={data => runAction('/worker/add', data)}/>\r\n        </div>\r\n      </div>\r\n      <div id=\"workers\" className=\"mb-4\">\r\n        {loading || workers.length === 0 ? (\r\n          'Loading...'\r\n        ) : (\r\n          <Table className=\"mt-3\">\r\n            <tbody>\r\n              {workers.map(worker => (\r\n                <Worker\r\n                  key={worker.id}\r\n                  worker={worker}\r\n                  mapping={mappings[worker.prefix]}\r\n                  runAction={runAction}\r\n                />\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <h4>Instructions</h4>\r\n        <ul>\r\n          <li>\r\n            To add a worker, either turn on an auto-updater, or grab a version\r\n            string from{' '}\r\n            <a href=\"https:waka.app/a/nz-wlg/info\">waka.app/a/nz-wlg/info</a>.\r\n          </li>\r\n          <li>\r\n            If you're running this locally, the import is not automatic. Use the\r\n            actions menu to get a Docker command that will populate your\r\n            database.\r\n          </li>\r\n          <li>\r\n            If you use the Docker command, shapes will also not be imported by\r\n            default.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      {alertModal && (\r\n        <AlertModal\r\n          toggle={toggleAlertModal}\r\n          content={alertContent}\r\n          modal={alertModal}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Workers;\r\n","import React from 'react';\r\nimport { Navbar, Container, Collapse, Nav, NavItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nconst WakaNavbar = () => {\r\n  return (\r\n    <Navbar color=\"dark\" dark expand=\"md\">\r\n      <Container className=\"d-flex justify-content-between\">\r\n        <Link to=\"/\" className=\"navbar-brand d-flex align-items-center\">\r\n          <strong>Waka</strong>\r\n          &nbsp;Orchestrator\r\n        </Link>\r\n        <Collapse className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <Link to=\"/config\" className=\"nav-link\">\r\n                Configuration\r\n              </Link>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default WakaNavbar;\r\n","import React, { useEffect, useState } from 'react';\r\nimport AlertModal from './AlertModal';\r\nimport { Button } from 'reactstrap';\r\nconst Config = () => {\r\n  const [config, setConfig] = useState('');\r\n  const [configRealtime, setConfigRealtime] = useState('');\r\n  const [git, setGit] = useState('');\r\n  const [alertModal, setAlertModal] = useState(false);\r\n  const [alertContent, setAlertContent] = useState('');\r\n  const [killModal, setKillModal] = useState(false);\r\n  const toggleAlertModal = content => {\r\n    if (alertModal) {\r\n      setAlertContent('');\r\n      setAlertModal(false);\r\n    } else {\r\n      setAlertContent(content);\r\n      setAlertModal(true);\r\n    }\r\n  };\r\n  const toggleKillModal = () => {\r\n    if (killModal) {\r\n      setKillModal(false);\r\n    } else {\r\n      setKillModal(true);\r\n    }\r\n  };\r\n\r\n  const killOrchestrator = async () => {\r\n    try {\r\n      await runAction('orchestrator/kill');\r\n      toggleKillModal();\r\n    } catch (error) {\r\n      toggleAlertModal('something bad happened');\r\n    }\r\n  };\r\n\r\n  const saveConfig = () => {\r\n    try {\r\n      const data = {\r\n        config: JSON.parse(config),\r\n        configRealtime: JSON.parse(configRealtime)\r\n      };\r\n      runAction('config', data);\r\n    } catch (error) {\r\n      toggleAlertModal('Error in JSON');\r\n    }\r\n  };\r\n  const runAction = async (action, input) => {\r\n    const r = await fetch(`/private/${action}`, {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(input)\r\n    });\r\n    const data = await r.json();\r\n    if (data.command) {\r\n      toggleAlertModal(data.command);\r\n    }\r\n    getConfig();\r\n  };\r\n  const getConfig = async () => {\r\n    const res = await fetch('/private/config');\r\n    const data = await res.json();\r\n    setConfig(JSON.stringify(data.config, ' ', 2));\r\n    setConfigRealtime(JSON.stringify(data.configRealtime, ' ', 2));\r\n  };\r\n  const getHash = async () => {\r\n    const res = await fetch('/private/git');\r\n    const git = await res.text();\r\n    setGit(git);\r\n  };\r\n  useEffect(() => {\r\n    getConfig();\r\n    getHash();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"mb-4\">\r\n        <h4>Deployed Version</h4>\r\n        <div className=\"bg-dark\">\r\n          <pre className=\"text-light p-4\" id=\"footer\">\r\n            {git}\r\n          </pre>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-1\">\r\n        <h2>Config</h2>\r\n        <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n          <Button size=\"sm\" outline color=\"danger\" onClick={toggleKillModal}>\r\n            Restart Orchestrator\r\n          </Button>\r\n          &nbsp;\r\n          <Button size=\"sm\" outline color=\"primary\" onClick={saveConfig}>\r\n            Save Config\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <div className=\"form-group\">\r\n          <textarea\r\n            className=\"form-control pre\"\r\n            rows=\"36\"\r\n            value={config}\r\n            onChange={e => setConfig(e.target.value)}\r\n          ></textarea>\r\n          <small className=\"form-text text-muted\">\r\n            You can override the{' '}\r\n            <a href=\"https://github.com/dymajo/waka-server/blob/master/waka-orchestrator/configManager.js\">\r\n              default config\r\n            </a>{' '}\r\n            by putting values in here. However, you will need to restart the\r\n            app!\r\n          </small>\r\n        </div>\r\n      </div>\r\n\r\n      <h2>Realtime Config</h2>\r\n      <div className=\"mb-4\">\r\n        <div className=\"form-group\">\r\n          <textarea\r\n            className=\"form-control pre\"\r\n            rows=\"16\"\r\n            value={configRealtime}\r\n            onChange={e => setConfigRealtime(e.target.value)}\r\n          ></textarea>\r\n          <small className=\"form-text text-muted\">\r\n            This configuration is only used if realtime is running as a seperate\r\n            process. When running as seperate processes, it is recommended that\r\n            you change the keyvalue implementation to dynamo.\r\n          </small>\r\n        </div>\r\n      </div>\r\n      {alertModal && (\r\n        <AlertModal\r\n          toggle={toggleAlertModal}\r\n          content={alertContent}\r\n          modal={alertModal}\r\n        />\r\n      )}\r\n      {killModal && (\r\n        <AlertModal\r\n          toggle={toggleKillModal}\r\n          content={\r\n            'Are you sure you want to restart the orchestrator?\\nDepending on your environment, it may not restart automatically.'\r\n          }\r\n          modal={killModal}\r\n          fn={killOrchestrator}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Config;\r\n","import React from 'react';\r\nimport Workers from './Workers';\r\nimport WakaNavbar from './WakaNavbar';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Config from './Config';\r\nfunction App() {\r\n  return (\r\n    <Router basename=\"/private\">\r\n      <WakaNavbar />\r\n      <div className=\"container main-container pt-5\">\r\n        <Switch>\r\n          <Route exact path=\"/config\" component={Config} />\r\n          <Route exact path=\"/\" component={Workers} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}