{"version":3,"sources":["CreateWorkerModal.jsx","Worker.jsx","AlertModal.jsx","Workers.jsx","WakaNavbar.jsx","Config.jsx","App.js","index.js"],"names":["CreateWorkerModal","createWorker","useState","modal","setmodal","prefix","setPrefix","version","setVersion","shapesContainer","setShapesContainer","shapesRegion","setShapesRegion","dbConfig","setDbConfig","newRealtime","setNewRealtime","disabled","CloseButton","className","type","onClick","aria-hidden","Button","outline","color","Modal","isOpen","toggle","backdrop","ModalHeader","close","ModalBody","FormGroup","Label","htmlFor","Input","onChange","e","target","value","id","placeholder","check","checked","ModalFooter","Worker","worker","mapping","runAction","workerData","setToggle","action","ctrl","Badge","pill","btns","size","recycle","DropdownItem","divider","dropdown","Dropdown","DropdownToggle","caret","DropdownMenu","data-id","data-prefix","href","title","dbname","status","AlertModal","content","fn","Workers","workers","setWorkers","mappings","setMappings","loading","setLoading","alertModal","setAlertModal","alertContent","setAlertContent","toggleAlertModal","input","a","fetch","method","headers","body","JSON","stringify","r","json","data","command","getWorkers","mappingsRequest","mappingsResponse","workersRequest","workersResponse","console","error","useEffect","length","Table","map","key","WakaNavbar","Navbar","dark","expand","Container","to","Collapse","Nav","NavItem","Config","config","setConfig","configRealtime","setConfigRealtime","git","setGit","killModal","setKillModal","toggleKillModal","killOrchestrator","getConfig","res","getHash","text","parse","rows","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0db69e37.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  FormGroup,\n  Button,\n  ModalFooter,\n  Label,\n  Input\n} from 'reactstrap';\nexport default function CreateWorkerModal({ createWorker }) {\n  const [modal, setmodal] = useState(false);\n  const [prefix, setPrefix] = useState('');\n  const [version, setVersion] = useState('');\n  const [shapesContainer, setShapesContainer] = useState('');\n  const [shapesRegion, setShapesRegion] = useState('');\n  const [dbConfig, setDbConfig] = useState('');\n  const [newRealtime, setNewRealtime] = useState(false);\n  const onCreateWorker = () => {\n    createWorker(\n      prefix,\n      version,\n      shapesContainer,\n      shapesRegion,\n      dbConfig,\n      newRealtime\n    );\n  };\n  const disabled =\n    !prefix || !version || !shapesContainer || !shapesRegion || !dbConfig;\n  const CloseButton = (\n    <button\n      className=\"close btn btn-round\"\n      type=\"button\"\n      onClick={() => setmodal(false)}\n    >\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  );\n  return (\n    <>\n      <Button outline color=\"primary\" onClick={() => setmodal(true)}>\n        Create Worker\n      </Button>\n      <Modal isOpen={modal} toggle={() => setmodal(false)} backdrop=\"static\">\n        <ModalHeader close={CloseButton}>Create Worker</ModalHeader>\n\n        <ModalBody>\n          <FormGroup>\n            <Label htmlFor=\"workerPrefix\">Prefix</Label>\n            <Input\n              onChange={e => setPrefix(e.target.value)}\n              type=\"text\"\n              id=\"workerPrefix\"\n              placeholder=\"us-nyc\"\n              value={prefix}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerVersion\">Version</Label>\n            <Input\n              onChange={e => setVersion(e.target.value)}\n              type=\"text\"\n              id=\"workerVersion\"\n              placeholder=\"20180706-12345\"\n              value={version}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerVersion\">Shapes Container</Label>\n            <Input\n              onChange={e => setShapesContainer(e.target.value)}\n              type=\"text\"\n              id=\"workerShapesContainer\"\n              placeholder=\"shapes-us-west-2.waka.app\"\n              value={shapesContainer}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerVersion\">Shapes Region</Label>\n            <Input\n              onChange={e => setShapesRegion(e.target.value)}\n              type=\"text\"\n              id=\"workerShapesRegion\"\n              placeholder=\"us-west-2\"\n              value={shapesRegion}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerDbconfig\">\n              DB Config <code>config.db[yourConfig]</code>\n            </Label>\n            <Input\n              onChange={e => setDbConfig(e.target.value)}\n              type=\"text\"\n              id=\"workerDbconfig\"\n              placeholder=\"local\"\n              value={dbConfig}\n            />\n          </FormGroup>\n          <FormGroup check>\n            <Input\n              onChange={e => setNewRealtime(e.target.checked)}\n              type=\"checkbox\"\n              className=\"form-check-Input\"\n              id=\"workerNewRealtime\"\n              checked={newRealtime}\n            />\n            <Label className=\"form-check-Label\" htmlFor=\"workerNewRealtime\">\n              New Realtime (experimental)\n            </Label>\n          </FormGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={() => setmodal(false)}>\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={onCreateWorker} disabled={disabled}>\n            Create Worker\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Badge,\n  DropdownItem,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu\n} from 'reactstrap';\n\nconst Worker = ({ worker, mapping = {}, runAction }) => {\n  const { id, prefix } = worker;\n  const workerData = { id, prefix };\n  const [toggle, setToggle] = useState(false);\n  const action = action => {\n    return runAction(action, workerData);\n  };\n  let ctrl = (\n    <Badge pill color=\"warning\">\n      inactive\n    </Badge>\n  );\n  let btns = (\n    <Button onClick={() => action('/mapping/set')} color=\"light\" size=\"sm\">\n      activate\n    </Button>\n  );\n  let recycle = '';\n  if (worker.id === mapping.value) {\n    ctrl = (\n      <Badge pill color=\"success\">\n        active\n      </Badge>\n    );\n    btns = (\n      <Button\n        onClick={() => action('/mapping/delete')}\n        color=\"danger\"\n        size=\"sm\"\n      >\n        unmap\n      </Button>\n    );\n    recycle = (\n      <>\n        <DropdownItem onClick={() => action('/worker/recycle')}>\n          Recycle Service\n        </DropdownItem>\n        <DropdownItem divider />\n      </>\n    );\n  }\n\n  const dropdown = (\n    <Dropdown size=\"sm\" isOpen={toggle} toggle={() => setToggle(!toggle)}>\n      <DropdownToggle color=\"light\" caret>\n        actions\n      </DropdownToggle>\n\n      <DropdownMenu>\n        {recycle}\n        <DropdownItem onClick={() => action('/worker/docker')}>\n          Get Docker Import Command\n        </DropdownItem>\n        <DropdownItem onClick={() => action('/worker/status/pendingimport')}>\n          Start Import (pending)\n        </DropdownItem>\n        <DropdownItem\n          onClick={() => action('/worker/status/pendingimport-willmap')}\n        >\n          Start Import & Map (pending)\n        </DropdownItem>\n        <DropdownItem onClick={() => action('/worker/status/imported')}>\n          Set Status to Imported\n        </DropdownItem>\n        <DropdownItem onClick={() => action('/worker/status/imported-willmap')}>\n          Set Status to Imported & Map\n        </DropdownItem>\n        <DropdownItem divider />\n        <DropdownItem onClick={() => action('/worker/delete')}>\n          Delete Worker\n        </DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n\n  return (\n    <tr data-id={worker.id} data-prefix={worker.prefix}>\n      <td>\n        <a href={`../${worker.prefix}/info`}>{worker.prefix}</a>\n      </td>\n      <td>{worker.version}</td>\n      <td className=\"td-truncate\" title={worker.dbname}>\n        {worker.dbname}\n      </td>\n      <td>{worker.status}</td>\n      <td>{ctrl}</td>\n      <td>{worker.newRealtime ? 'True' : 'False'}</td>\n      <td>\n        {btns}\n        {dropdown}\n      </td>\n    </tr>\n  );\n};\n\nexport default Worker;\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst AlertModal = ({ modal, toggle, content, fn }) => {\n  const CloseButton = (\n    <button className=\"close btn btn-round\" type=\"button\" onClick={toggle}>\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  );\n  return (\n    <Modal isOpen={modal} toggle={toggle} backdrop=\"static\">\n      <ModalHeader close={CloseButton}>Alert</ModalHeader>\n      <ModalBody>{content}</ModalBody>\n      {fn && (\n        <ModalFooter>\n          <Button onClick={fn}>Submit</Button>\n        </ModalFooter>\n      )}\n    </Modal>\n  );\n};\n\nexport default AlertModal;\n","import React, { useState, useEffect } from 'react';\nimport { Table, Button, Badge, DropdownItem } from 'reactstrap';\nimport CreateWorkerModal from './CreateWorkerModal';\nimport Worker from './Worker';\nimport AlertModal from './AlertModal';\n\nconst Workers = () => {\n  const [workers, setWorkers] = useState([]);\n  const [mappings, setMappings] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [alertModal, setAlertModal] = useState(false);\n  const [alertContent, setAlertContent] = useState('');\n  const toggleAlertModal = content => {\n    if (alertModal) {\n      setAlertContent('');\n      setAlertModal(false);\n    } else {\n      setAlertContent(content);\n      setAlertModal(true);\n    }\n  };\n  const runAction = async (action, input) => {\n    const r = await fetch(action, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(input)\n    });\n    const data = await r.json();\n    if (data.command) {\n      // setAlertModal(true);\n      toggleAlertModal(data.command);\n    }\n    getWorkers(false);\n  };\n  const getWorkers = async (loading = true) => {\n    try {\n      if (loading) {\n        setLoading(true);\n      }\n\n      const mappingsRequest = await fetch('/mapping');\n      const mappingsResponse = await mappingsRequest.json();\n      setMappings(mappingsResponse);\n\n      const workersRequest = await fetch('/worker');\n      const workersResponse = await workersRequest.json();\n      setWorkers(workersResponse);\n      if (loading) {\n        setLoading(false);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    getWorkers();\n  }, []);\n  return (\n    <>\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-2\">\n        <h2>Workers</h2>\n        <div className=\"btn-toolbar mb-2 mb-md-0\">\n          <CreateWorkerModal />\n        </div>\n      </div>\n      <div id=\"workers\" className=\"mb-4\">\n        {loading || workers.length === 0 ? (\n          'Loading...'\n        ) : (\n          <Table>\n            <thead>\n              <tr>\n                <th>Prefix</th>\n                <th>Version</th>\n                <th>DB Name</th>\n                <th>Import Status</th>\n                <th>Status</th>\n                <th>New Realtime?</th>\n                <th>Control</th>\n              </tr>\n            </thead>\n            <tbody>\n              {workers.map(worker => (\n                <Worker\n                  key={worker.id}\n                  worker={worker}\n                  mapping={mappings[worker.prefix]}\n                  runAction={runAction}\n                />\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </div>\n\n      <div>\n        <h5>Instructions</h5>\n        <ul>\n          <li>\n            To add a worker, either turn on an auto-updater, or grab a version\n            string from{' '}\n            <a href=\"https:waka.app/a/nz-wlg/info\">waka.app/a/nz-wlg/info</a>.\n          </li>\n          <li>\n            If you're running this locally, the import is not automatic. Use the\n            actions menu to get a Docker command that will populate your\n            database.\n          </li>\n          <li>\n            If you use the Docker command, shapes will also not be imported by\n            default.\n          </li>\n        </ul>\n      </div>\n      {alertModal && (\n        <AlertModal\n          toggle={toggleAlertModal}\n          content={alertContent}\n          modal={alertModal}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Workers;\n","import React from 'react';\nimport { Navbar, Container, Collapse, Nav, NavItem } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nconst WakaNavbar = () => {\n  return (\n    <Navbar color=\"dark\" dark expand=\"md\">\n      <Container className=\"d-flex justify-content-between\">\n        <Link to=\"/\" className=\"navbar-brand d-flex align-items-center\">\n          <strong>Waka</strong>\n          &nbsp;Orchestrator\n        </Link>\n        <Collapse className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n          <Nav className=\"mr-auto\">\n            <NavItem>\n              <Link to=\"/config\" className=\"nav-link\">\n                Configuration\n              </Link>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default WakaNavbar;\n","import React, { useEffect, useState } from 'react';\nimport AlertModal from './AlertModal';\nimport { Button } from 'reactstrap';\nconst Config = () => {\n  const [config, setConfig] = useState('');\n  const [configRealtime, setConfigRealtime] = useState('');\n  const [git, setGit] = useState('');\n  const [alertModal, setAlertModal] = useState(false);\n  const [alertContent, setAlertContent] = useState('');\n  const [killModal, setKillModal] = useState(false);\n  const toggleAlertModal = content => {\n    if (alertModal) {\n      setAlertContent('');\n      setAlertModal(false);\n    } else {\n      setAlertContent(content);\n      setAlertModal(true);\n    }\n  };\n  const toggleKillModal = () => {\n    if (killModal) {\n      setKillModal(false);\n    } else {\n      setKillModal(true);\n    }\n  };\n\n  const killOrchestrator = async () => {\n    try {\n      await runAction('/orchestrator/kill');\n      toggleKillModal();\n    } catch (error) {\n      toggleAlertModal('something bad happened');\n    }\n  };\n\n  const saveConfig = () => {\n    try {\n      const data = {\n        config: JSON.parse(config),\n        configRealtime: JSON.parse(configRealtime)\n      };\n      runAction('/config', data);\n    } catch (error) {\n      toggleAlertModal('Error in JSON');\n    }\n  };\n  const runAction = async (action, input) => {\n    const r = await fetch(action, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(input)\n    });\n    const data = await r.json();\n    if (data.command) {\n      toggleAlertModal(data.command);\n    }\n    getConfig();\n  };\n  const getConfig = async () => {\n    const res = await fetch('/config');\n    const data = await res.json();\n    setConfig(JSON.stringify(data.config, ' ', 2));\n    setConfigRealtime(JSON.stringify(data.configRealtime, ' ', 2));\n  };\n  const getHash = async () => {\n    const res = await fetch('/git');\n    const git = await res.text();\n    setGit(git);\n  };\n  useEffect(() => {\n    getConfig();\n    getHash();\n  }, []);\n  return (\n    <>\n      <div className=\"mb-4\">\n        <h4>Deployed Version</h4>\n        <div className=\"bg-dark\">\n          <pre className=\"text-light p-4\" id=\"footer\">\n            {git}\n          </pre>\n        </div>\n      </div>\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-1\">\n        <h2>Config</h2>\n        <div className=\"btn-toolbar mb-2 mb-md-0\">\n          <Button size=\"sm\" outline color=\"danger\" onClick={toggleKillModal}>\n            Restart Orchestrator\n          </Button>\n          &nbsp;\n          <Button size=\"sm\" outline color=\"primary\" onClick={saveConfig}>\n            Save Config\n          </Button>\n        </div>\n      </div>\n      <div className=\"mb-4\">\n        <div className=\"form-group\">\n          <textarea\n            className=\"form-control pre\"\n            id=\"configTextarea\"\n            rows=\"36\"\n            value={config}\n            onChange={e => setConfig(e.target.value)}\n          ></textarea>\n          <small className=\"form-text text-muted\">\n            You can override the{' '}\n            <a href=\"https://github.com/dymajo/waka-server/blob/master/waka-orchestrator/configManager.js\">\n              default config\n            </a>{' '}\n            by putting values in here. However, you will need to restart the\n            app!\n          </small>\n        </div>\n      </div>\n\n      <h2>Realtime Config</h2>\n      <div className=\"mb-4\">\n        <div className=\"form-group\">\n          <textarea\n            className=\"form-control pre\"\n            id=\"configRealtimeTextarea\"\n            rows=\"16\"\n            value={configRealtime}\n            onChange={e => setConfigRealtime(e.target.value)}\n          ></textarea>\n          <small className=\"form-text text-muted\">\n            This configuration is only used if realtime is running as a seperate\n            process. When running as seperate processes, it is recommended that\n            you change the keyvalue implementation to dynamo.\n          </small>\n        </div>\n      </div>\n      {alertModal && (\n        <AlertModal\n          toggle={toggleAlertModal}\n          content={alertContent}\n          modal={alertModal}\n        />\n      )}\n      {killModal && (\n        <AlertModal\n          toggle={toggleKillModal}\n          content={\n            'Are you sure you want to restart the orchestrator?\\nDepending on your environment, it may not restart automatically.'\n          }\n          modal={killModal}\n          fn={killOrchestrator}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Config;\n","import React from 'react';\nimport Workers from './Workers';\nimport WakaNavbar from './WakaNavbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Config from './Config';\nfunction App() {\n  return (\n    <Router>\n      <WakaNavbar />\n      <div className=\"container main-container pt-5\">\n        <Switch>\n          <Route exact path=\"/config\" component={Config} />\n          <Route exact path=\"/\" component={Workers} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}