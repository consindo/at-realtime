{"version":3,"sources":["CreateWorkerModal.jsx","Worker.jsx","AlertModal.jsx","Workers.jsx","WakaNavbar.jsx","Config.jsx","App.js","index.js"],"names":["CreateWorkerModal","createWorker","useState","modal","setmodal","prefix","setPrefix","version","setVersion","shapesContainer","setShapesContainer","shapesRegion","setShapesRegion","dbConfig","setDbConfig","newRealtime","setNewRealtime","loadingCities","setLoadingCities","cities","setCities","getCities","a","fetch","res","json","data","Object","keys","map","city","label","longName","value","useEffect","disabled","CloseButton","className","type","onClick","aria-hidden","Button","outline","color","Modal","isOpen","toggle","backdrop","ModalHeader","close","ModalBody","FormGroup","Label","htmlFor","Input","length","onChange","e","target","options","selectedIndex","key","placeholder","check","checked","ModalFooter","Worker","worker","mapping","runAction","workerData","id","setToggle","action","ctrl","Badge","pill","btns","size","recycle","DropdownItem","divider","dropdown","Dropdown","DropdownToggle","caret","DropdownMenu","href","title","dbname","status","AlertModal","content","fn","Workers","workers","setWorkers","mappings","setMappings","loading","setLoading","alertModal","setAlertModal","alertContent","setAlertContent","toggleAlertModal","input","method","headers","body","JSON","stringify","r","command","getWorkers","mappingsRequest","mappingsResponse","workersRequest","workersResponse","console","error","Table","WakaNavbar","Navbar","dark","expand","Container","to","Collapse","Nav","navbar","NavItem","Config","config","setConfig","configRealtime","setConfigRealtime","git","setGit","killModal","setKillModal","toggleKillModal","killOrchestrator","getConfig","getHash","text","parse","rows","App","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff940569.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  FormGroup,\n  Button,\n  ModalFooter,\n  Label,\n  Input\n} from 'reactstrap';\nexport default function CreateWorkerModal({ createWorker }) {\n  const [modal, setmodal] = useState(false);\n  const [prefix, setPrefix] = useState('');\n  const [version, setVersion] = useState('');\n  const [shapesContainer, setShapesContainer] = useState('');\n  const [shapesRegion, setShapesRegion] = useState('');\n  const [dbConfig, setDbConfig] = useState('');\n  const [newRealtime, setNewRealtime] = useState(false);\n  const [loadingCities, setLoadingCities] = useState(false);\n  const [cities, setCities] = useState([]);\n  const getCities = async () => {\n    setLoadingCities(true);\n    const res = await fetch('/private/prefixes');\n    const data = await res.json();\n    const cities = Object.keys(data).map(city => ({\n      label: data[city].longName,\n      value: city\n    }));\n    setCities(cities);\n    setLoadingCities(false);\n  };\n  useEffect(() => {\n    getCities();\n  }, []);\n  const onCreateWorker = () => {\n    createWorker(\n      prefix,\n      version,\n      shapesContainer,\n      shapesRegion,\n      dbConfig,\n      newRealtime\n    );\n  };\n  const disabled =\n    !prefix || !version || !shapesContainer || !shapesRegion || !dbConfig;\n  const CloseButton = (\n    <button\n      className=\"close btn btn-round\"\n      type=\"button\"\n      onClick={() => setmodal(false)}\n    >\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  );\n  return (\n    <>\n      <Button outline color=\"primary\" onClick={() => setmodal(true)}>\n        Create Worker\n      </Button>\n      <Modal isOpen={modal} toggle={() => setmodal(false)} backdrop=\"static\">\n        <ModalHeader close={CloseButton}>Create Worker</ModalHeader>\n\n        <ModalBody>\n          <FormGroup>\n            <Label htmlFor=\"workerPrefix\">Prefix</Label>\n            <Input\n              type=\"select\"\n              disabled={loadingCities || cities.length === 0}\n              onChange={e =>\n                setPrefix(e.target.options[e.target.selectedIndex].value)\n              }\n            >\n              {cities.map(city => (\n                <option key={city.value} value={city.value}>\n                  {city.label}\n                </option>\n              ))}\n            </Input>\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerVersion\">Version</Label>\n            <Input\n              onChange={e => setVersion(e.target.value)}\n              type=\"text\"\n              placeholder=\"20180706-12345\"\n              value={version}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerVersion\">Shapes Container</Label>\n            <Input\n              onChange={e => setShapesContainer(e.target.value)}\n              type=\"text\"\n              placeholder=\"shapes-us-west-2.waka.app\"\n              value={shapesContainer}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerVersion\">Shapes Region</Label>\n            <Input\n              onChange={e => setShapesRegion(e.target.value)}\n              type=\"text\"\n              placeholder=\"us-west-2\"\n              value={shapesRegion}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"workerDbconfig\">\n              DB Config <code>config.db[yourConfig]</code>\n            </Label>\n            <Input\n              onChange={e => setDbConfig(e.target.value)}\n              type=\"text\"\n              placeholder=\"local\"\n              value={dbConfig}\n            />\n          </FormGroup>\n          <FormGroup check>\n            <Input\n              onChange={e => setNewRealtime(e.target.checked)}\n              type=\"checkbox\"\n              className=\"form-check-Input\"\n              checked={newRealtime}\n            />\n            <Label className=\"form-check-Label\" htmlFor=\"workerNewRealtime\">\n              New Realtime (experimental)\n            </Label>\n          </FormGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={() => setmodal(false)}>\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={onCreateWorker} disabled={disabled}>\n            Create Worker\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Badge,\n  DropdownItem,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu\n} from 'reactstrap';\n\nconst Worker = ({ worker, mapping = {}, runAction }) => {\n  const { id, prefix } = worker;\n  const workerData = { id, prefix };\n  const [toggle, setToggle] = useState(false);\n  const action = action => {\n    return runAction(action, workerData);\n  };\n  let ctrl = (\n    <Badge pill color=\"warning\">\n      inactive\n    </Badge>\n  );\n  let btns = (\n    <Button onClick={() => action('mapping/set')} color=\"light\" size=\"sm\">\n      activate\n    </Button>\n  );\n  let recycle = '';\n  if (worker.id === mapping.value) {\n    ctrl = (\n      <Badge pill color=\"success\">\n        active\n      </Badge>\n    );\n    btns = (\n      <Button onClick={() => action('mapping/delete')} color=\"danger\" size=\"sm\">\n        unmap\n      </Button>\n    );\n    recycle = (\n      <>\n        <DropdownItem onClick={() => action('worker/recycle')}>\n          Recycle Service\n        </DropdownItem>\n        <DropdownItem divider />\n      </>\n    );\n  }\n\n  const dropdown = (\n    <Dropdown size=\"sm\" isOpen={toggle} toggle={() => setToggle(!toggle)}>\n      <DropdownToggle color=\"light\" caret>\n        actions\n      </DropdownToggle>\n\n      <DropdownMenu>\n        {recycle}\n        <DropdownItem onClick={() => action('worker/docker')}>\n          Get Docker Import Command\n        </DropdownItem>\n        <DropdownItem onClick={() => action('worker/status/pendingimport')}>\n          Start Import (pending)\n        </DropdownItem>\n        <DropdownItem\n          onClick={() => action('worker/status/pendingimport-willmap')}\n        >\n          Start Import & Map (pending)\n        </DropdownItem>\n        <DropdownItem onClick={() => action('worker/status/imported')}>\n          Set Status to Imported\n        </DropdownItem>\n        <DropdownItem onClick={() => action('worker/status/imported-willmap')}>\n          Set Status to Imported & Map\n        </DropdownItem>\n        <DropdownItem divider />\n        <DropdownItem onClick={() => action('worker/delete')}>\n          Delete Worker\n        </DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n\n  return (\n    <tr>\n      <td>\n        <a href={`../${worker.prefix}/info`}>{worker.prefix}</a>\n      </td>\n      <td>{worker.version}</td>\n      <td className=\"td-truncate\" title={worker.dbname}>\n        {worker.dbname}\n      </td>\n      <td>{worker.status}</td>\n      <td>{ctrl}</td>\n      <td>{worker.newRealtime ? 'True' : 'False'}</td>\n      <td>\n        {btns}\n        {dropdown}\n      </td>\n    </tr>\n  );\n};\n\nexport default Worker;\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst AlertModal = ({ modal, toggle, content, fn }) => {\n  const CloseButton = (\n    <button className=\"close btn btn-round\" type=\"button\" onClick={toggle}>\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  );\n  return (\n    <Modal isOpen={modal} toggle={toggle} backdrop=\"static\">\n      <ModalHeader close={CloseButton}>Alert</ModalHeader>\n      <ModalBody>{content}</ModalBody>\n      {fn && (\n        <ModalFooter>\n          <Button onClick={fn}>Submit</Button>\n        </ModalFooter>\n      )}\n    </Modal>\n  );\n};\n\nexport default AlertModal;\n","import React, { useState, useEffect } from 'react';\nimport { Table } from 'reactstrap';\nimport CreateWorkerModal from './CreateWorkerModal';\nimport Worker from './Worker';\nimport AlertModal from './AlertModal';\n\nconst Workers = () => {\n  const [workers, setWorkers] = useState([]);\n  const [mappings, setMappings] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [alertModal, setAlertModal] = useState(false);\n  const [alertContent, setAlertContent] = useState('');\n  const toggleAlertModal = content => {\n    if (alertModal) {\n      setAlertContent('');\n      setAlertModal(false);\n    } else {\n      setAlertContent(content);\n      setAlertModal(true);\n    }\n  };\n  const runAction = async (action, input) => {\n    const r = await fetch(`/private/${action}`, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(input)\n    });\n    const data = await r.json();\n    if (data.command) {\n      // setAlertModal(true);\n      toggleAlertModal(data.command);\n    }\n    getWorkers(false);\n  };\n  const getWorkers = async (loading = true) => {\n    try {\n      if (loading) {\n        setLoading(true);\n      }\n\n      const mappingsRequest = await fetch('/private/mapping');\n      const mappingsResponse = await mappingsRequest.json();\n      setMappings(mappingsResponse);\n\n      const workersRequest = await fetch('/private/worker');\n      const workersResponse = await workersRequest.json();\n      setWorkers(workersResponse);\n      if (loading) {\n        setLoading(false);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    getWorkers();\n  }, []);\n  return (\n    <>\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-2\">\n        <h2>Workers</h2>\n        <div className=\"btn-toolbar mb-2 mb-md-0\">\n          <CreateWorkerModal />\n        </div>\n      </div>\n      <div id=\"workers\" className=\"mb-4\">\n        {loading || workers.length === 0 ? (\n          'Loading...'\n        ) : (\n          <Table>\n            <thead>\n              <tr>\n                <th>Prefix</th>\n                <th>Version</th>\n                <th>DB Name</th>\n                <th>Import Status</th>\n                <th>Status</th>\n                <th>New Realtime?</th>\n                <th>Control</th>\n              </tr>\n            </thead>\n            <tbody>\n              {workers.map(worker => (\n                <Worker\n                  key={worker.id}\n                  worker={worker}\n                  mapping={mappings[worker.prefix]}\n                  runAction={runAction}\n                />\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </div>\n\n      <div>\n        <h5>Instructions</h5>\n        <ul>\n          <li>\n            To add a worker, either turn on an auto-updater, or grab a version\n            string from{' '}\n            <a href=\"https:waka.app/a/nz-wlg/info\">waka.app/a/nz-wlg/info</a>.\n          </li>\n          <li>\n            If you're running this locally, the import is not automatic. Use the\n            actions menu to get a Docker command that will populate your\n            database.\n          </li>\n          <li>\n            If you use the Docker command, shapes will also not be imported by\n            default.\n          </li>\n        </ul>\n      </div>\n      {alertModal && (\n        <AlertModal\n          toggle={toggleAlertModal}\n          content={alertContent}\n          modal={alertModal}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Workers;\n","import React from 'react';\nimport { Navbar, Container, Collapse, Nav, NavItem } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nconst WakaNavbar = () => {\n  return (\n    <Navbar color=\"dark\" dark expand=\"md\">\n      <Container className=\"d-flex justify-content-between\">\n        <Link to=\"/\" className=\"navbar-brand d-flex align-items-center\">\n          <strong>Waka</strong>\n          &nbsp;Orchestrator\n        </Link>\n        <Collapse className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <Link to=\"/config\" className=\"nav-link\">\n                Configuration\n              </Link>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default WakaNavbar;\n","import React, { useEffect, useState } from 'react';\nimport AlertModal from './AlertModal';\nimport { Button } from 'reactstrap';\nconst Config = () => {\n  const [config, setConfig] = useState('');\n  const [configRealtime, setConfigRealtime] = useState('');\n  const [git, setGit] = useState('');\n  const [alertModal, setAlertModal] = useState(false);\n  const [alertContent, setAlertContent] = useState('');\n  const [killModal, setKillModal] = useState(false);\n  const toggleAlertModal = content => {\n    if (alertModal) {\n      setAlertContent('');\n      setAlertModal(false);\n    } else {\n      setAlertContent(content);\n      setAlertModal(true);\n    }\n  };\n  const toggleKillModal = () => {\n    if (killModal) {\n      setKillModal(false);\n    } else {\n      setKillModal(true);\n    }\n  };\n\n  const killOrchestrator = async () => {\n    try {\n      await runAction('orchestrator/kill');\n      toggleKillModal();\n    } catch (error) {\n      toggleAlertModal('something bad happened');\n    }\n  };\n\n  const saveConfig = () => {\n    try {\n      const data = {\n        config: JSON.parse(config),\n        configRealtime: JSON.parse(configRealtime)\n      };\n      runAction('config', data);\n    } catch (error) {\n      toggleAlertModal('Error in JSON');\n    }\n  };\n  const runAction = async (action, input) => {\n    const r = await fetch(`/private/${action}`, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(input)\n    });\n    const data = await r.json();\n    if (data.command) {\n      toggleAlertModal(data.command);\n    }\n    getConfig();\n  };\n  const getConfig = async () => {\n    const res = await fetch('/private/config');\n    const data = await res.json();\n    setConfig(JSON.stringify(data.config, ' ', 2));\n    setConfigRealtime(JSON.stringify(data.configRealtime, ' ', 2));\n  };\n  const getHash = async () => {\n    const res = await fetch('/private/git');\n    const git = await res.text();\n    setGit(git);\n  };\n  useEffect(() => {\n    getConfig();\n    getHash();\n  }, []);\n  return (\n    <>\n      <div className=\"mb-4\">\n        <h4>Deployed Version</h4>\n        <div className=\"bg-dark\">\n          <pre className=\"text-light p-4\" id=\"footer\">\n            {git}\n          </pre>\n        </div>\n      </div>\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-1\">\n        <h2>Config</h2>\n        <div className=\"btn-toolbar mb-2 mb-md-0\">\n          <Button size=\"sm\" outline color=\"danger\" onClick={toggleKillModal}>\n            Restart Orchestrator\n          </Button>\n          &nbsp;\n          <Button size=\"sm\" outline color=\"primary\" onClick={saveConfig}>\n            Save Config\n          </Button>\n        </div>\n      </div>\n      <div className=\"mb-4\">\n        <div className=\"form-group\">\n          <textarea\n            className=\"form-control pre\"\n            rows=\"36\"\n            value={config}\n            onChange={e => setConfig(e.target.value)}\n          ></textarea>\n          <small className=\"form-text text-muted\">\n            You can override the{' '}\n            <a href=\"https://github.com/dymajo/waka-server/blob/master/waka-orchestrator/configManager.js\">\n              default config\n            </a>{' '}\n            by putting values in here. However, you will need to restart the\n            app!\n          </small>\n        </div>\n      </div>\n\n      <h2>Realtime Config</h2>\n      <div className=\"mb-4\">\n        <div className=\"form-group\">\n          <textarea\n            className=\"form-control pre\"\n            rows=\"16\"\n            value={configRealtime}\n            onChange={e => setConfigRealtime(e.target.value)}\n          ></textarea>\n          <small className=\"form-text text-muted\">\n            This configuration is only used if realtime is running as a seperate\n            process. When running as seperate processes, it is recommended that\n            you change the keyvalue implementation to dynamo.\n          </small>\n        </div>\n      </div>\n      {alertModal && (\n        <AlertModal\n          toggle={toggleAlertModal}\n          content={alertContent}\n          modal={alertModal}\n        />\n      )}\n      {killModal && (\n        <AlertModal\n          toggle={toggleKillModal}\n          content={\n            'Are you sure you want to restart the orchestrator?\\nDepending on your environment, it may not restart automatically.'\n          }\n          modal={killModal}\n          fn={killOrchestrator}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Config;\n","import React from 'react';\nimport Workers from './Workers';\nimport WakaNavbar from './WakaNavbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Config from './Config';\nfunction App() {\n  return (\n    <Router basename=\"/private\">\n      <WakaNavbar />\n      <div className=\"container main-container pt-5\">\n        <Switch>\n          <Route exact path=\"/config\" component={Config} />\n          <Route exact path=\"/\" component={Workers} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}